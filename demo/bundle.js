(function () {
    'use strict';

    /**
     * Scroll in viewport add data attribute
     * スクロールしてビューポートに入ったらdata属性を与える
     *
     * @author   Hiroshi Fukuda <info.sygnas@gmail.com>
     * @license  MIT
     */
    var ATTR_INVIEW = 'data-inview';
    var ATTR_ROOT = 'data-inview-root';
    var ATTR_MARGIN = 'data-inview-rootMargin';
    var ATTR_THRESHOLD = 'data-inview-threshold';
    var DEFAULT = {
      root: null,
      rootMargin: '0px',
      threshold: 0
    };
    /**
     * in view controller
     */

    var default_1 =
    /** @class */
    function () {
      /**
       * コンストラクタ
       * ターゲット一覧を精査して、 data-inview-root、data-inview-rootMargin、data-inview-threshold が設定されていないか確認する。
       * 上記属性毎に observer を作成する。
       */
      function default_1(target, option) {
        var _this = this;

        if (option === void 0) {
          option = {};
        }

        this.targetList = {};
        this.opt = Object.assign(DEFAULT, option);
        document.querySelectorAll(target).forEach(function (target) {
          _this.initTargetList(target);
        });
      }
      /**
       * ターゲットとオプションの管理リストを作成
       */


      default_1.prototype.initTargetList = function (target) {
        // 監視対象エレメントに独自指定があればそちらを使う。
        // 無ければオプション設定を使う
        var root = target.getAttribute(ATTR_ROOT) || this.opt.root;
        var rootMargin = target.getAttribute(ATTR_MARGIN) || this.opt.rootMargin;
        var threshold = Number(target.getAttribute(ATTR_THRESHOLD)) || this.opt.threshold;
        var key = "".concat(root, "-").concat(rootMargin, "-").concat(threshold);

        if (key in this.targetList === false) {
          var option = {
            root: root,
            rootMargin: rootMargin,
            threshold: threshold
          };
          var observer = new IntersectionObserver(this.observerCallback, option);
          this.targetList[key] = {
            list: [],
            observer: observer
          };
        }

        this.targetList[key].list.push(target);
      };
      /**
       * スクロール検知処理を開始
       */


      default_1.prototype.start = function () {
        var _this = this;

        Object.keys(this.targetList).forEach(function (key) {
          var targetObj = _this.targetList[key];
          targetObj.list.forEach(function (target) {
            targetObj.observer.observe(target);
          });
        });
      };
      /**
       * 画面に入ったら ATTR_INVIEW のdata属性に true を入れる。
       * オブザーバーから監視解除される。
       */


      default_1.prototype.observerCallback = function (entries, observer) {
        entries.forEach(function (entry) {
          if (!entry.isIntersecting) return;
          observer.unobserve(entry.target);
          entry.target.setAttribute(ATTR_INVIEW, 'true');
        });
      };

      return default_1;
    }();

    const inview = new default_1('.target');

    inview.start();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9kaXN0L2luZGV4LmVzLmpzIiwic3JjL2RlbW8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTY3JvbGwgaW4gdmlld3BvcnQgYWRkIGRhdGEgYXR0cmlidXRlXG4gKiDjgrnjgq/jg63jg7zjg6vjgZfjgabjg5Pjg6Xjg7zjg53jg7zjg4jjgavlhaXjgaPjgZ/jgolkYXRh5bGe5oCn44KS5LiO44GI44KLXG4gKlxuICogQGF1dGhvciAgIEhpcm9zaGkgRnVrdWRhIDxpbmZvLnN5Z25hc0BnbWFpbC5jb20+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbnZhciBBVFRSX0lOVklFVyA9ICdkYXRhLWludmlldyc7XG52YXIgQVRUUl9ST09UID0gJ2RhdGEtaW52aWV3LXJvb3QnO1xudmFyIEFUVFJfTUFSR0lOID0gJ2RhdGEtaW52aWV3LXJvb3RNYXJnaW4nO1xudmFyIEFUVFJfVEhSRVNIT0xEID0gJ2RhdGEtaW52aWV3LXRocmVzaG9sZCc7XG52YXIgREVGQVVMVCA9IHtcbiAgICByb290OiBudWxsLFxuICAgIHJvb3RNYXJnaW46ICcwcHgnLFxuICAgIHRocmVzaG9sZDogMCxcbn07XG4vKipcbiAqIGluIHZpZXcgY29udHJvbGxlclxuICovXG52YXIgZGVmYXVsdF8xID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqIOOCv+ODvOOCsuODg+ODiOS4gOimp+OCkueyvuafu+OBl+OBpuOAgSBkYXRhLWludmlldy1yb29044CBZGF0YS1pbnZpZXctcm9vdE1hcmdpbuOAgWRhdGEtaW52aWV3LXRocmVzaG9sZCDjgYzoqK3lrprjgZXjgozjgabjgYTjgarjgYTjgYvnorroqo3jgZnjgovjgIJcbiAgICAgKiDkuIroqJjlsZ7mgKfmr47jgasgb2JzZXJ2ZXIg44KS5L2c5oiQ44GZ44KL44CCXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdF8xKHRhcmdldCwgb3B0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChvcHRpb24gPT09IHZvaWQgMCkgeyBvcHRpb24gPSB7fTsgfVxuICAgICAgICB0aGlzLnRhcmdldExpc3QgPSB7fTtcbiAgICAgICAgdGhpcy5vcHQgPSBPYmplY3QuYXNzaWduKERFRkFVTFQsIG9wdGlvbik7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIF90aGlzLmluaXRUYXJnZXRMaXN0KHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgr/jg7zjgrLjg4Pjg4jjgajjgqrjg5fjgrfjg6fjg7Pjga7nrqHnkIbjg6rjgrnjg4jjgpLkvZzmiJBcbiAgICAgKi9cbiAgICBkZWZhdWx0XzEucHJvdG90eXBlLmluaXRUYXJnZXRMaXN0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAvLyDnm6Poppblr77osaHjgqjjg6zjg6Hjg7Pjg4jjgavni6zoh6rmjIflrprjgYzjgYLjgozjgbDjgZ3jgaHjgonjgpLkvb/jgYbjgIJcbiAgICAgICAgLy8g54Sh44GR44KM44Gw44Kq44OX44K344On44Oz6Kit5a6a44KS5L2/44GGXG4gICAgICAgIHZhciByb290ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShBVFRSX1JPT1QpIHx8IHRoaXMub3B0LnJvb3Q7XG4gICAgICAgIHZhciByb290TWFyZ2luID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShBVFRSX01BUkdJTikgfHwgdGhpcy5vcHQucm9vdE1hcmdpbjtcbiAgICAgICAgdmFyIHRocmVzaG9sZCA9IE51bWJlcih0YXJnZXQuZ2V0QXR0cmlidXRlKEFUVFJfVEhSRVNIT0xEKSkgfHwgdGhpcy5vcHQudGhyZXNob2xkO1xuICAgICAgICB2YXIga2V5ID0gXCJcIi5jb25jYXQocm9vdCwgXCItXCIpLmNvbmNhdChyb290TWFyZ2luLCBcIi1cIikuY29uY2F0KHRocmVzaG9sZCk7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy50YXJnZXRMaXN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHtcbiAgICAgICAgICAgICAgICByb290OiByb290LFxuICAgICAgICAgICAgICAgIHJvb3RNYXJnaW46IHJvb3RNYXJnaW4sXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiB0aHJlc2hvbGQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKHRoaXMub2JzZXJ2ZXJDYWxsYmFjaywgb3B0aW9uKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0TGlzdFtrZXldID0ge1xuICAgICAgICAgICAgICAgIGxpc3Q6IFtdLFxuICAgICAgICAgICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldExpc3Rba2V5XS5saXN0LnB1c2godGFyZ2V0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+aknOefpeWHpueQhuOCkumWi+Wni1xuICAgICAqL1xuICAgIGRlZmF1bHRfMS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0TGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0T2JqID0gX3RoaXMudGFyZ2V0TGlzdFtrZXldO1xuICAgICAgICAgICAgdGFyZ2V0T2JqLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0T2JqLm9ic2VydmVyLm9ic2VydmUodGFyZ2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIOeUu+mdouOBq+WFpeOBo+OBn+OCiSBBVFRSX0lOVklFVyDjga5kYXRh5bGe5oCn44GrIHRydWUg44KS5YWl44KM44KL44CCXG4gICAgICog44Kq44OW44K244O844OQ44O844GL44KJ55uj6KaW6Kej6Zmk44GV44KM44KL44CCXG4gICAgICovXG4gICAgZGVmYXVsdF8xLnByb3RvdHlwZS5vYnNlcnZlckNhbGxiYWNrID0gZnVuY3Rpb24gKGVudHJpZXMsIG9ic2VydmVyKSB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICBlbnRyeS50YXJnZXQuc2V0QXR0cmlidXRlKEFUVFJfSU5WSUVXLCAndHJ1ZScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBkZWZhdWx0XzE7XG59KCkpO1xuXG5leHBvcnQgeyBkZWZhdWx0XzEgYXMgZGVmYXVsdCB9O1xuIiwiXG5pbXBvcnQgSW5WaWV3IGZyb20gJy4uLy4uL2Rpc3QvaW5kZXguZXMnO1xuXG5jb25zdCBpbnZpZXcgPSBuZXcgSW5WaWV3KCcudGFyZ2V0Jyk7XG5cbmludmlldy5zdGFydCgpO1xuXG5cbiJdLCJuYW1lcyI6WyJBVFRSX0lOVklFVyIsIkFUVFJfUk9PVCIsIkFUVFJfTUFSR0lOIiwiQVRUUl9USFJFU0hPTEQiLCJERUZBVUxUIiwicm9vdCIsInJvb3RNYXJnaW4iLCJ0aHJlc2hvbGQiLCJkZWZhdWx0XzEiLCJ0YXJnZXQiLCJvcHRpb24iLCJfdGhpcyIsInRhcmdldExpc3QiLCJvcHQiLCJPYmplY3QiLCJhc3NpZ24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaW5pdFRhcmdldExpc3QiLCJwcm90b3R5cGUiLCJnZXRBdHRyaWJ1dGUiLCJOdW1iZXIiLCJrZXkiLCJjb25jYXQiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZXJDYWxsYmFjayIsImxpc3QiLCJwdXNoIiwic3RhcnQiLCJrZXlzIiwidGFyZ2V0T2JqIiwib2JzZXJ2ZSIsImVudHJpZXMiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwidW5vYnNlcnZlIiwic2V0QXR0cmlidXRlIiwiSW5WaWV3Il0sIm1hcHBpbmdzIjoiOzs7SUFBQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUlBLFdBQVcsR0FBRyxhQUFsQjtJQUNBLElBQUlDLFNBQVMsR0FBRyxrQkFBaEI7SUFDQSxJQUFJQyxXQUFXLEdBQUcsd0JBQWxCO0lBQ0EsSUFBSUMsY0FBYyxHQUFHLHVCQUFyQjtJQUNBLElBQUlDLE9BQU8sR0FBRztJQUNWQyxFQUFBQSxJQUFJLEVBQUUsSUFESTtJQUVWQyxFQUFBQSxVQUFVLEVBQUUsS0FGRjtJQUdWQyxFQUFBQSxTQUFTLEVBQUU7SUFIRCxDQUFkO0lBS0E7SUFDQTtJQUNBOztJQUNBLElBQUlDLFNBQVM7SUFBRztJQUFlLFlBQVk7SUFDdkM7SUFDSjtJQUNBO0lBQ0E7SUFDQTtJQUNJLFdBQVNBLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQztJQUMvQixRQUFJQyxLQUFLLEdBQUcsSUFBWjs7SUFDQSxRQUFJRCxNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtJQUFFQSxNQUFBQSxNQUFNLEdBQUcsRUFBVDtJQUFjOztJQUN2QyxTQUFLRSxVQUFMLEdBQWtCLEVBQWxCO0lBQ0EsU0FBS0MsR0FBTCxHQUFXQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1gsT0FBZCxFQUF1Qk0sTUFBdkIsQ0FBWDtJQUNBTSxJQUFBQSxRQUFRLENBQUNDLGdCQUFULENBQTBCUixNQUExQixFQUFrQ1MsT0FBbEMsQ0FBMEMsVUFBVVQsTUFBVixFQUFr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
